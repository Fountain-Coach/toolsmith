name: Publish OCI Artifact

on:
  workflow_dispatch:
    inputs:
      qcow2_path:
        description: Path to QCOW2 to publish
        required: true
        default: dist/image.qcow2
      artifact_name:
        description: Optional name of a previously uploaded artifact containing the QCOW2
        required: false
        default: ""
      image_ref:
        description: Full GHCR ref (ghcr.io/OWNER/REPO:TAG)
        required: true
        default: ghcr.io/${{ github.repository }}:latest
  workflow_call:
    inputs:
      qcow2_path:
        description: Path to QCOW2 to publish
        required: true
        type: string
        default: dist/image.qcow2
      artifact_name:
        description: Optional name of a previously uploaded artifact containing the QCOW2
        required: false
        type: string
        default: ""
      image_ref:
        description: Full GHCR ref (ghcr.io/OWNER/REPO:TAG)
        required: true
        type: string
        default: ghcr.io/${{ github.repository }}:latest

jobs:
  publish:
    runs-on: ubuntu-latest
    concurrency:
      group: publish-oci-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup ORAS CLI
        uses: oras-project/setup-oras@v1
        with:
          # NOTE: setup-oras expects the version WITHOUT the leading 'v'
          version: 1.3.0

      - name: Verify ORAS
        run: oras version

      - name: Download QCOW2 artifact (optional)
        if: ${{ inputs.artifact_name != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: dist

      - name: Login to GHCR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | oras login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Push QCOW2 to GHCR
        env:
          QCOW2_PATH: ${{ inputs.qcow2_path }}
          IMAGE_REF: ${{ inputs.image_ref }}
        run: |
          set -euo pipefail
          if [[ ! -f "$QCOW2_PATH" ]]; then
            echo "QCOW2 not found at $QCOW2_PATH; attempting to locate in dist/" >&2
            alt=$(find dist -type f -name '*.qcow2' | head -n1 || true)
            if [[ -n "${alt:-}" && -f "$alt" ]]; then
              echo "Found QCOW2 at $alt"
              QCOW2_PATH="$alt"
            else
              echo "No QCOW2 found; ensure inputs.qcow2_path or inputs.artifact_name is set correctly" >&2
              exit 1
            fi
          fi
          echo "Computing SHA256 of $QCOW2_PATH"
          ORIG_SHA=$(sha256sum "$QCOW2_PATH" | awk '{print $1}')
          echo "orig_sha=$ORIG_SHA" >> "$GITHUB_OUTPUT"
          echo "Artifact: $QCOW2_PATH" >> "$GITHUB_STEP_SUMMARY"
          echo "SHA256: $ORIG_SHA" >> "$GITHUB_STEP_SUMMARY"
          fname=$(basename "$QCOW2_PATH")
          oras push "$IMAGE_REF" \
            "$QCOW2_PATH:application/vnd.fountain.toolsmith.qcow2" \
            --annotation org.opencontainers.image.title="$fname" \
            --artifact-type application/vnd.fountain.toolsmith.qcow2

      - name: Poll and verify artifact availability
        env:
          IMAGE_REF: ${{ inputs.image_ref }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Re-login to GHCR for pull verification"
          echo "$GITHUB_TOKEN" | oras login ghcr.io -u "${{ github.actor }}" --password-stdin
          tmpdir=$(mktemp -d)
          attempts=20
          sleep_secs=6
          ok=0
          echo "Polling GHCR for availability: $IMAGE_REF (max $attempts attempts)"
          for i in $(seq 1 $attempts); do
            rm -rf "$tmpdir"/* || true
            if (cd "$tmpdir" && oras pull "$IMAGE_REF" >/dev/null 2>&1); then
              if compgen -G "$tmpdir/*.qcow2" > /dev/null; then
                pulled=$(ls -1 "$tmpdir"/*.qcow2 | head -n1)
                PULLED_SHA=$(sha256sum "$pulled" | awk '{print $1}')
                echo "Pulled: $pulled"
                echo "Pulled SHA256: $PULLED_SHA"
                echo "Pulled file: $pulled" >> "$GITHUB_STEP_SUMMARY"
                echo "Pulled SHA256: $PULLED_SHA" >> "$GITHUB_STEP_SUMMARY"
                ok=1
                break
              fi
            fi
            echo "Attempt $i/$attempts: not available yet; sleeping ${sleep_secs}s..."
            sleep "$sleep_secs"
          done
          if [[ "$ok" != "1" ]]; then
            echo "Verification failed: artifact not available or missing .qcow2 payload" >&2
            exit 1
          fi

name: Build And Publish Now

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: Tag to use for GHCR image (suffix only)
        required: false
        default: ci
  push:
    branches:
      - ci/build-now/**

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            qemu-utils libguestfs-tools curl ca-certificates

      - name: Generate CI SSH key for image provisioning
        id: genkey
        run: |
          ssh-keygen -t ed25519 -N "" -f /tmp/toolsmith_ci_key
          echo "pub_key=$(cat /tmp/toolsmith_ci_key.pub)" >> $GITHUB_OUTPUT

      - name: Write authorized_keys for image
        run: |
          set -euo pipefail
          mkdir -p vendor/fountainkit-toolsmith-image/build
          echo "${{ steps.genkey.outputs.pub_key }}" > vendor/fountainkit-toolsmith-image/build/ci_authorized_keys

      - name: Build QCOW2 image
        id: build
        working-directory: vendor/fountainkit-toolsmith-image
        env:
          LIBGUESTFS_BACKEND: direct
          IMAGE_VERSION: ci-${{ github.run_id }}
          AUTHORIZED_KEYS: ${{ github.workspace }}/vendor/fountainkit-toolsmith-image/build/ci_authorized_keys
        run: |
          set -euo pipefail
          sudo -E bash build/build-image.sh
          # Find the produced qcow2
          QCOW2=$(ls -1 dist/*.qcow2 | head -n1)
          echo "qcow2_path=${QCOW2}" >> "$GITHUB_OUTPUT"

      - name: Setup ORAS CLI
        uses: oras-project/setup-oras@v1
        with:
          version: 1.3.0

      - name: Verify ORAS
        run: oras version

      - name: Login to GHCR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | oras login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Push QCOW2 to GHCR
        env:
          QCOW2_PATH: ${{ steps.build.outputs.qcow2_path }}
          IMAGE_REF: ghcr.io/${{ github.repository }}:ci-${{ github.sha }}
        run: |
          set -euo pipefail
          if [[ ! -f "$QCOW2_PATH" ]]; then
            echo "QCOW2 not found at $QCOW2_PATH" >&2
            exit 1
          fi
          echo "Computing SHA256 of $QCOW2_PATH"
          ORIG_SHA=$(sha256sum "$QCOW2_PATH" | awk '{print $1}')
          echo "Artifact: $QCOW2_PATH" >> "$GITHUB_STEP_SUMMARY"
          echo "SHA256: $ORIG_SHA" >> "$GITHUB_STEP_SUMMARY"
          fname=$(basename "$QCOW2_PATH")
          oras push "$IMAGE_REF" \
            "$QCOW2_PATH:application/vnd.fountain.toolsmith.qcow2" \
            --annotation org.opencontainers.image.title="$fname" \
            --artifact-type application/vnd.fountain.toolsmith.qcow2

      - name: Poll and verify artifact availability
        env:
          IMAGE_REF: ghcr.io/${{ github.repository }}:ci-${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Re-login to GHCR for pull verification"
          echo "$GITHUB_TOKEN" | oras login ghcr.io -u "${{ github.actor }}" --password-stdin
          tmpdir=$(mktemp -d)
          attempts=40
          sleep_secs=6
          ok=0
          echo "Polling GHCR for availability: $IMAGE_REF (max $attempts attempts)"
          for i in $(seq 1 $attempts); do
            rm -rf "$tmpdir"/* || true
            if (cd "$tmpdir" && oras pull "$IMAGE_REF" >/dev/null 2>&1); then
              if compgen -G "$tmpdir/*.qcow2" > /dev/null; then
                pulled=$(ls -1 "$tmpdir"/*.qcow2 | head -n1)
                PULLED_SHA=$(sha256sum "$pulled" | awk '{print $1}')
                echo "Pulled: $pulled"
                echo "Pulled SHA256: $PULLED_SHA"
                echo "Pulled file: $pulled" >> "$GITHUB_STEP_SUMMARY"
                echo "Pulled SHA256: $PULLED_SHA" >> "$GITHUB_STEP_SUMMARY"
                ok=1
                break
              fi
            fi
            echo "Attempt $i/$attempts: not available yet; sleeping ${sleep_secs}s..."
            sleep "$sleep_secs"
          done
          if [[ "$ok" != "1" ]]; then
            echo "Verification failed: artifact not available or missing .qcow2 payload" >&2
            exit 1
          fi
